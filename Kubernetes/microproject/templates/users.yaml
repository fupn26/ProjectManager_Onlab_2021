apiVersion: v1
kind: Service
metadata:
  name: users
  labels:
    app.kubernetes.io/name: users
    app.kubernetes.io/instance: {{ .Release.Name }}
    microproject.tier: backend
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: http
      name: http
  selector:
    app.kubernetes.io/name: users
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users
  labels:
    app.kubernetes.io/name: users
    app.kubernetes.io/instance: {{ .Release.Name }}
    microproject.tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: users
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: users
        app.kubernetes.io/instance: {{ .Release.Name }}
        microproject.tier: backend
    spec:
      containers:
        - name: users
          image: microproject/users:{{ .Values.users.tag }}
          ports:
            - name: http
              containerPort: 8080
          env:
            - name: spring_profiles_active
              value: prod
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: users-secret
                  key: jwt_secret
            - name: ADMIN_PASS
              valueFrom:
                secretKeyRef:
                  name: users-secret
                  key: admin_password
            - name: RABBIT_USER
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-secret
                  key: username
            - name: RABBIT_PASS
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-secret
                  key: user_password
            - name: RABBIT_HOST
              value: rabbitmq
            - name: RABBIT_PORT
              value: "5672"
            - name: DB_HOST
              value: mysql
            - name: DB_PORT
              value: "3306"
            - name: DB
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: db_name
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: username
            - name: DB_PASS
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: user_password
            - name: OTEL_TRACES_EXPORTER
              value: jaeger
            - name: OTEL_EXPORTER_JAEGER_ENDPOINT
              value: http://jaeger-collector:14250
            - name: OTEL_EXPORTER_JAEGER_TIMEOUT
              value: "10000"
            - name: OTEL_SERVICE_NAME
              value: users
            - name: OTEL_METRICS_EXPORTER
              value: none
            - name: KEYCLOAK_BASE_URL
              value: http://keycloak/keycloak
            - name: KEYCLOAK_REALM
              value: project_manager_realm
            - name: KEYCLOAK_ADMIN
              valueFrom:
                secretKeyRef:
                  name: keycloak-secret
                  key: admin_user
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom: 
                secretKeyRef:
                  name: keycloak-secret
                  key: admin_user_password
      restartPolicy: Always
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: users
  labels:
    app.kubernetes.io/name: users
    app.kubernetes.io/instance: {{ .Release.Name }}
    microproject.tier: backend
  annotations:
    traefik.ingress.kubernetes.io/auth-url: http://keycloak/keycloak/realms/project_manager_realm/protocol/openid-connect/userinfo
    traefik.ingress.kubernetes.io/auth-response-headers: Authorization
    traefik.ingress.kubernetes.io/auth-type: forward
spec:
  rules:
    - http:
        paths:
          - path: /api/v1/user
            pathType: Prefix
            backend:
              service:
                name: users
                port:
                  name: http